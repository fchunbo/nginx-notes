1.负载均衡
	1）配置介绍
		1.upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现
	客户端IP到后端服务器的负载均衡。在上面的设定中，通过upstream指令指定了一个负载
	均衡器的名称1.2.3.4。这个名称可以任意指定，在后面需要用到的地方直接调用即可。
	
		2.Nginx的负载均衡模块目前支持4种调度算法，下面进行分别介绍，其中后两项属于
		第三方调度算法。  
			<1> 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后
		端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权
		值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。
		
			<2> ip_hash。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定
		访问一个后端服务器，有效解决了动态网页存在的session共享问题。
		
			<3> fair。这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小
		和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，
		响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须
		下载Nginx的upstream_fair模块。
		
			<4> url_hash。此方法按访问url的hash结果来分配请求，使每个url定向到同一个后
		端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果
		需要使用这种调度算法，必须安装Nginx 的hash软件包。
		
		3.upstream 支持的状态参数
			在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时
		还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：      
			<1> down，表示当前的server暂时不参与负载均衡。
			
			<2> backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请
		求backup机器，因此这台机器的压力最轻。
			<3> max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。
			<4> fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。
			
	注，当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。
	例如：
			http {  
				include       /etc/nginx/mime.types;  
				default_type  application/octet-stream;  
		  
				log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '  
								'$status $body_bytes_sent "$http_referer" '  
								'"$http_user_agent" "$http_x_forwarded_for"';  
		  
				access_log  /var/log/nginx/access.log  main;  
		  
				sendfile        on;  
				#tcp_nopush     on;  
			  
				keepalive_timeout  65;  
			  
				#gzip  on;  
				upstream 1.2.3.4 {  
					server 10.0.0.111:80;  
					server 10.0.0.137:80;  
				}  
					
				server{
					location / {   
						 proxy_pass http://1.2.3.4; 
						 #真实的服务器可以是通过该参数获取真实的ip地址
						 proxy_set_header X-Real-IP $remote_addr;   
					}  
				}
#注，upstream是定义在server{ }之外的，不能定义在server{ }内部。定义好upstream之后，用proxy_pass引用一下即可。